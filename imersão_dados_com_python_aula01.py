# -*- coding: utf-8 -*-
"""Imersão Dados com Python_Aula01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-hEeFLjZtXabHtwIeHVBJbi8adezbwZ5

# **Aula 01 - Análise de Dados com Pandas**
"""

import pandas as pd

df = pd.read_csv("https://raw.githubusercontent.com/guilhermeonrails/data-jobs/refs/heads/main/salaries.csv")

df.head()

df.info()

df.describe()

df.shape

linhas, colunas = df.shape[0], df.shape[1]
print('linhas:', linhas)
print('colunas:', colunas)

df.columns

"""
**Renomeando as colunas do DataFrame**"""

# Dicionário de renomeação
novos_nomes = {
    'work_year': 'ano',
    'experience_level': 'senioridade',
    'employment_type': 'contrato',
    'job_title': 'cargo',
    'salary': 'salario',
    'salary_currency': 'moeda',
    'salary_in_usd': 'usd',
    'employee_residence': 'residencia',
    'remote_ratio': 'remoto',
    'company_location': 'empresa',
    'company_size': 'tamanho_empresa'
}

# Aplicando renomeação
df.rename(columns=novos_nomes, inplace=True)

# Verificando resultado
df.head()

"""**Analisando quais sãos as categorias das colunas categóricas**

Nível de senioridade
"""

df['senioridade'].value_counts()

"""Tipo de contrato"""

df['contrato'].value_counts()

"""Regime de trabalho"""

df['remoto'].value_counts()

"""Tamanho da empresa"""

df['tamanho_empresa'].value_counts()

"""**Modificando o nome das categorias:**"""

substituir_senioridade = {
    'SE': 'Senior',
    'MI': 'Pleno',
    'EN': 'Junior',
    'EX': 'Executivo'
}

df['senioridade'] = df['senioridade'].replace(substituir_senioridade)
df['senioridade'].value_counts()

substituir_contrato = {
    'FT': 'Integral',
    'CT': 'Contrato',
    'PT': 'Parcial',
    'FL': 'Freelancer'
}

df['contrato'] = df['contrato'].replace(substituir_contrato)
df['contrato'].value_counts()

traducao_tamanho = {
    'M': 'Médio',
    'L': 'Grande',
    'S': 'Pequeno'
}

df['tamanho_empresa'] = df['tamanho_empresa'].replace(traducao_tamanho)
df['tamanho_empresa'].value_counts()

substituir_remoto = {
    0: 'Presencial',
    50: 'Híbrido',
    100: 'Remoto'
}

df['remoto'] = df['remoto'].replace(substituir_remoto)
df['remoto'].value_counts()

df.head()

"""Podemos também resumir as informações categóricas com o método describe(), exibindo a quantidade de categorias únicas, qual é categoria mais frequente e sua respectiva frequência:"""

df.describe(include='object')

"""# **Aula 02 - Preparação e limpeza dos Dados**"""

df.isnull()

df.head()

df.isnull().sum()

df['ano'].unique()

df[df.isnull().any(axis=1)]

df_limpo = df.dropna()

df_limpo.isnull().sum()

df_limpo.head()

df_limpo.info()

df_limpo = df_limpo.assign(ano=df_limpo['ano'].astype('int64'))
df_limpo.info()

"""# **Aula 03 - Visualização de Dados**"""

df_limpo.head()

df_limpo['senioridade'].value_counts().plot(kind='bar', title='Distribuição de Senioridade')

import seaborn as sns

sns.barplot(data=df_limpo, x='senioridade', y='usd')

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
sns.barplot(data=df_limpo, x='senioridade', y='usd')
plt.title('Salário médio por nível de Senioridade', fontweight='bold')
plt.xlabel('Senioridade')
plt.ylabel('Salário médio anual (USD)')
plt.show()

df_limpo.groupby('senioridade')['usd'].mean().sort_values(ascending=False)

ordem = df_limpo.groupby('senioridade')['usd'].mean().sort_values(ascending=True).index

ordem

plt.figure(figsize=(8, 6))
sns.barplot(data=df_limpo, x='senioridade', y='usd', order=ordem)
plt.title('Salário médio por nível de Senioridade', fontsize=16, fontweight='bold')
plt.xlabel('Senioridade', fontsize=12)
plt.ylabel('Salário médio anual (USD)', fontsize=12)

plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(data=df_limpo['usd'], bins=25, kde=True)
plt.title('Dsitribuição dos salários anuais', fontsize=16, fontweight='bold')
plt.xlabel('Salário (USD)', fontsize=12)
plt.ylabel('Frequência', fontsize=12)
plt.show()

plt.figure(figsize=(10, 5))
sns.boxplot(x=df_limpo['usd'])
plt.title('Boxplot salários', fontsize=16, fontweight='bold')
plt.xlabel('Salários (USD)', fontsize=12)

plt.show()

ordem_senioridade = ['Junior', 'Pleno', 'Senior', 'Executivo']

plt.figure(figsize=(8, 6))
sns.boxplot(x='senioridade', y='usd', data=df_limpo, order=ordem_senioridade, palette='Set2', hue='senioridade')
plt.title('Boxplot - Distribuição salarial por nível de Senioridade', fontsize=16, fontweight='bold')
plt.xlabel('Senioridade', fontsize=12)
plt.ylabel('Salário médio anual (USD)', fontsize=12)
plt.show()

import plotly.express as px

df_avg_salary_by_seniority = df_limpo.groupby('senioridade')['usd'].mean().sort_values(ascending=False).reset_index()

fig = px.bar(df_avg_salary_by_seniority, x='senioridade', y='usd',
             title='Salário médio por nível de Senioridade (Plotly)',
             labels={'senioridade': 'Nível de Senioridade', 'usd': 'Salário médio anual (USD)'})

fig.show()

remoto_contagem = df_limpo['remoto'].value_counts().reset_index()
remoto_contagem.columns = ['tipo_trabalho', 'quantidade']


fig = px.pie(remoto_contagem,
             names='tipo_trabalho',
             values='quantidade',
             title='Proporção dos tipos de trabalho'
)

fig.show()

remoto_contagem = df_limpo['remoto'].value_counts().reset_index()
remoto_contagem.columns = ['tipo_trabalho', 'quantidade']


fig = px.pie(remoto_contagem,
             names='tipo_trabalho',
             values='quantidade',
             title='Proporção dos tipos de trabalho',
             hole=0.5
)

fig.update_traces(textinfo='percent+label')
fig.show()

df.head()

!pip install pycountry

import pycountry

def iso2_to_iso3(code):
    try:
        return pycountry.countries.get(alpha_2=code).alpha_3
    except:
        return None

df_limpo['residencia_iso3'] = df_limpo['residencia'].apply(iso2_to_iso3)

df_ds = df_limpo[df_limpo['cargo'] == 'Data Scientist']
media_ds_pais = df_ds.groupby('residencia_iso3')['usd'].mean().reset_index()

fig = px.choropleth(media_ds_pais,
                    locations='residencia_iso3',
                    color='usd',
                    color_continuous_scale='rdylgn',
                    title='Salário médio de Cientista de Dados por país',
                    labels={'usd': 'Salário médio (USD)', 'residencia_iso3': 'País'})

fig.show()

df_limpo.head()

"""# **Extra - Evolução do salário médio anual por ano e nível de senioridade**

Para obter uma perspectiva temporal da evolução salarial, é fundamental analisar se, ao longo dos anos, os valores estão crescendo, mantendo-se estáveis ou apresentando queda em cada nível de carreira.

O gráfico ideal para isso é um line plot com múltiplas linhas, uma para cada nível de senioridade.
"""

df_media_ano = df_limpo.groupby(['ano', 'senioridade'])['usd'].mean().reset_index()

fig = px.line(
    df_media_ano,
    x='ano',
    y='usd',
    color='senioridade',
    markers=True,
    title='Evolução do Salário Médio por Senioridade (USD)',
    labels={
        'ano': 'Ano',
        'usd': 'Salário médio anual (USD)',
        'senioridade': 'Nível de Senioridade'
    }
)

fig.update_layout(
    xaxis=dict(dtick=1),
    yaxis_title='Salário médio anual (USD)',
    legend_title='Senioridade'
)

fig.show()

"""**Exportando os visuais**"""

df_limpo.to_csv('dados-imersao-final.csv', index=False)